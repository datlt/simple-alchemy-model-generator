# -*- coding: utf-8 -*-
r"""Model definition for PostgreSQL tables.
This file is generated by model_generator.py
Do not modify by hand. You may loose your handwritten part when this file is re-generated.
"""
from sqlalchemy import BIGINT
from sqlalchemy import Boolean
from sqlalchemy import Column
from sqlalchemy import Date
from sqlalchemy import Numeric

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy import ForeignKeyConstraint
from sqlalchemy import PrimaryKeyConstraint
from sqlalchemy.schema import Index
from sqlalchemy import SMALLINT
from sqlalchemy.sql.expression import case
from sqlalchemy import String
from sqlalchemy import Text
from sqlalchemy import text
from sqlalchemy import TIMESTAMP
from sqlalchemy import UniqueConstraint
from sqlalchemy.orm import relationship

from dbaccess.pg_models_helper import PgModelsHelper

from utils import consts

Base = declarative_base()

class PgModels(object):

{% for table_info in tables_info %}
    class {{ table_info[0].table_name | table_name_to_class }}(Base, PgModelsHelper):
        __tablename__ = "{{table_info[0].table_name}}"
        
    {%for column_info in table_info[0].columns %}
        {{column_info.column_name}} = Column({{column_info | column_type}}, nullable={{column_info.is_nullable | nullable}}{{', server_default=text("'+column_info.column_default+'")' if column_info.column_default is not none else ''}})
        {% if (column_info | insert_label) is not none %}   
        @hybrid_property
        def {{column_info.column_name}}_label(self):
            """Display name of column {{column_info.column_name}}'s value."""
            return case(value=text('{{column_info.column_name}}'), whens=consts.{{column_info | insert_label}}.as_list())
        
        # Const candidate classes
        {{column_info | insert_label}} = consts.{{column_info | insert_label}}

        {% endif %}
    {% endfor %}
    {% if table_info[0].one_to_many is not none %}   
        {%for one_to_many in table_info[0].one_to_many %}
        {{one_to_many.foreign_table_name | strip_tbl}} = relationship("{{ one_to_many.foreign_table_name | table_name_to_class }}", back_populates="{{one_to_many.table_name | strip_tbl}}_list")
        {% endfor %}
    {% endif %}
    {% if table_info[0].many_to_one is not none %}   
        {%for many_to_one in table_info[0].many_to_one %}
        {{many_to_one.table_name | strip_tbl}}_list = relationship("{{ many_to_one.table_name | table_name_to_class }}", back_populates="{{many_to_one.foreign_table_name | strip_tbl}}")
        {% endfor %}
    {% endif %}

        __table_args__ = (
            PrimaryKeyConstraint('{{table_info[0].primary_key}}'),
        {% if table_info[0].one_to_many is not none %}
            {%for one_to_many in table_info[0].one_to_many %}
            ForeignKeyConstraint(["{{one_to_many.column_name}}"], ["{{one_to_many.foreign_table_name}}.{{one_to_many.foreign_column_name}}"]),
            {% endfor %}
        {% endif %}
        )
{% endfor %}